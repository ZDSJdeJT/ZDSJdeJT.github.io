---
import { Section } from '@/components/section';
import { useTranslations, type Lang } from '@/i18n';

const currentLocale = Astro.currentLocale as Lang;

const t = useTranslations(currentLocale);

type Item = {
  name: string;
  tag: string;
  type?: string;
  summary: string;
  role?: string;
  stack: { label?: string; value: string[] }[];
  highlight: string;
  difficulty: string;
};

const productionProjectTag = t({
  en: 'Production Project',
  'zh-cn': '生产项目',
});

const eCommerceType = t({
  en: 'E-commerce',
  'zh-cn': '电商类',
});

const frontendRole = t({
  en: 'Frontend Engineer',
  'zh-cn': '前端开发工程师',
});

const backendStackLabel = t({
  en: 'Backend:&nbsp;',
  'zh-cn': '后端：',
});

const frontendStackLabel = t({
  en: 'Frontend:&nbsp;',
  'zh-cn': '前端：',
});

const projectExperienceList: Item[] = [
  {
    name: t({
      en: 'Dai Xiang Er',
      'zh-cn': '带响儿',
    }),
    tag: productionProjectTag,
    type: eCommerceType,
    summary: t({
      en: 'This project consists of a backend management system for merchants and a mobile application for users.',
      'zh-cn': '该项目包括供商家使用的后台管理系统以及供用户使用的移动端应用。',
    }),
    role: frontendRole,
    stack: [
      {
        label: backendStackLabel,
        value: ['C#', '.NET', 'MySQL'],
      },
      {
        label: frontendStackLabel,
        value: [
          'Vue Cli',
          'JavaScript',
          'Vue2',
          'Less',
          'Vuex',
          'Vue Router',
          'Axios',
          'Element UI',
          'React Native',
          'UniApp',
        ],
      },
    ],
    highlight: t({
      en: 'In the early stages of mobile app development, we used the cross-platform framework <strong>UniApp</strong>. However, when we later needed to integrate a native ad SDK, we encountered significant limitations. Since rebuilding the app with a different tech stack would have been too costly in terms of time and manpower, we opted to package the existing <strong>UniApp</strong> application as a native <strong>HTML5</strong> + <strong>CSS3</strong> + <strong>JavaScript</strong> bundle. This bundle was then rendered within a <strong>WebView</strong> component in <strong>React Native</strong>. While certain features, such as product poster downloads, required additional bridge code, this approach significantly reduced the cost of migrating to a new tech stack.',
      'zh-cn':
        '移动应用端前期使用的跨端技术是<strong>UniApp</strong>，后期在需要接入原生广告SDK时遇到瓶颈，因为更换技术栈重新开发的时间/人力成本过于巨大，所以选择将之前的<strong>UniApp</strong>应用打包为原生<strong>HTML5</strong>+<strong>CSS3</strong>+<strong>JavaScript</strong>，并将打包后的产物在<strong>React Native</strong>中使用<strong>WebView</strong>组件进行渲染。虽然商品海报下载等功能还需要额外写一些桥接代码，但这种做法已然大幅降低了技术栈迁移成本。',
    }),
    difficulty: t({
      en: 'When integrating the native ad SDK on iOS, I faced a major challenge: I had never worked with native iOS development before, and the primary language for iOS development—<strong>Objective-C</strong>—was completely unfamiliar to me. Its syntax was drastically different from the C-like languages I was accustomed to. As a result, I had to dedicate a significant amount of time and effort to learning it from scratch before I could successfully implement the required functionality. This experience greatly strengthened my ability to learn under pressure and adapt to new technologies.',
      'zh-cn':
        '在iOS端接入原生广告SDK时，从未接触过原生iOS应用开发的我发现iOS应用原生开发语言是<strong>Objective-C</strong>，我从未接触过这门语言，并且这门语言的语法和我所接触过的编程语言（C-like）的都截然不同。于是我不得不投入大量精力进行学习，最终才实现了需求，这段经历很好地锻炼了我的学习能力和抗压能力。',
    }),
  },
  {
    name: t({
      en: 'Zhiya Welfare Campus',
      'zh-cn': '职芽福利校园',
    }),
    tag: productionProjectTag,
    type: eCommerceType,
    summary: t({
      en: 'This project includes a WeChat Mini Program for users, an Android tablet application for interview booths, and a backend management system for operators and merchants. (The Mini Program can be found by searching within WeChat Mini Programs.)',
      'zh-cn':
        '该项目包括供用户使用的微信小程序、面试亭内的安卓平板应用和供运营人员和商户使用的后台管理系统。（小程序可在微信小程序内搜索到）',
    }),
    role: frontendRole,
    stack: [
      {
        label: backendStackLabel,
        value: ['PHP', 'Laravel', 'MySQL'],
      },
      {
        label: frontendStackLabel,
        value: [
          'Rsbuild',
          'JavaScript',
          'TypeScript',
          'Vue2',
          'Scss',
          'Vuex',
          'Vue Router',
          'Axios',
          'Element UI',
          'Echarts',
          'VueDraggablePlus',
          t({
            en: 'Native WeChat Mini Program',
            'zh-cn': '原生微信小程序',
          }),
        ],
      },
    ],
    highlight: t({
      en: "The project's original tech stack was <strong>Vue CLI</strong> + <strong>Vue 2.6</strong> + <strong>JavaScript</strong>. I refactored it to use <strong>Rsbuild</strong> + <strong>Vue 2.7</strong> + <strong>JavaScript</strong> + <strong>TypeScript</strong>, replacing most CommonJS modules with ESM for consistency and introducing path aliases. Additionally, all new module development now follows the <strong>Composition API</strong> with the <strong>setup</strong> syntax (with complex components written in <strong>TSX</strong>). After the refactor, the project's development server startup time was reduced from 3–4 minutes to just 30–40 seconds (tested on an AMD Ryzen 5 4600U CPU). The modernized project is now significantly more efficient and maintainable.",
      'zh-cn':
        '该项目原本的技术栈是<strong>Vue Cli</strong>+<strong>Vue2.6</strong>+<strong>Javascript</strong>，被我改造为<strong>Rsbuild</strong>+<strong>Vue2.7</strong>+<strong>Javascript</strong>+<strong>Typescript</strong>，并替换了大部分CJS，统一使用ESM，并且引入了路径别名。后期新模块的开发统一使用<strong>composition api</strong>+<strong>setup</strong>写法进行开发（逻辑较为复杂的组件使用<strong>tsx</strong>写法）。改造后，项目的开发服务的启动时间由之前的3-4分钟缩减到了30-40秒（CPU为AMD 锐龙5 4600U），改造后的项目已然是一个现代化的前端项目。',
    }),
    difficulty: t({
      en: "I implemented a 'componentized' architecture for the project, achieving a low-code-like effect. Currently, most major pages in the Mini Program are built using this componentized approach, allowing operators to configure pages via drag-and-drop and parameter settings in the backend management system. The project now includes approximately 15 component types and 20 navigation methods, with integrated event tracking for user interactions, which are displayed in the backend. Initially, I struggled with abstracting the 'components' since I had never developed similar logic before. Through careful planning and design, I assigned a unique <strong>type</strong> value to each component and leveraged Vue’s built-in <strong>component</strong> feature along with a lookup table approach to develop page components. Subsequent work involved building individual subcomponents, for which I designed a standardized <strong>props</strong> and <strong>events</strong> system to enable seamless two-way data binding between subcomponents and page components. Since its launch, the componentized system has had zero bug reports. Shortly after release, a new requirement emerged: the ability to toggle component visibility. Thanks to the well-structured design, I was able to implement this feature quickly and efficiently.",
      'zh-cn':
        '对项目进行了“组件化”改造（实现了类似低代码的效果），目前小程序端的主要页面均为“组件化”的，运营人员能够在后台管理平台端进行拖拽和参数设置实现对应的页面配置（项目目前大概包括15种组件和20种跳转方式），且对各种组件的点击事件进行了埋点操作并在后台管理端进行了数据展示。在开发该功能时，如何抽象“组件”一度让我有些迷茫，因为之前从未开发过类似的逻辑。经过思考和设计，我定义了每种组件的唯一type值，使用Vue内置的component组件加打表法完成了页面组件的开发，之后的工作就是开发每个子组件，我设计了统一的props和events实现了子组件和页面组件的数据的双向绑定。“组件化”功能上线至今没有遇到bug反馈，而且上线不久后接到了给每个组件添加一个是否隐藏的字段的需求，得益于良好的设计，很快就完成了该需求。',
    }),
  },
  {
    name: t({
      en: 'Zhiya Helper',
      'zh-cn': '职芽小帮手',
    }),
    tag: productionProjectTag,
    type: t({
      en: 'Tool',
      'zh-cn': '工具类',
    }),
    summary: t({
      en: "This project is a pure web application built with <strong>React</strong>, primarily designed for internal use by the company's developers and select operations staff. It was initiated solely by me.",
      'zh-cn':
        '该项目是一个纯网页应用，技术栈为<strong>React</strong>，主要供公司内部的开发人员和部分运营人员使用，由我个人发起。',
    }),
    stack: [
      {
        value: [
          'Bun',
          'Vite',
          'TypeScript',
          'React',
          'Tailwind',
          'Tanstack Router',
          'Axios',
          'Shadcn UI',
          'Nuqs',
          'Excel.js',
        ],
      },
    ],
    highlight: t({
      en: 'Through this project, I gained hands-on experience with the highly popular <strong>Shadcn UI</strong> and <strong>TanStack Router</strong>. The project significantly improved the efficiency and user experience of internal developers and select operations staff within the company.',
      'zh-cn':
        '通过这个项目，我实践了目前热度非常高的<strong>Shadcn UI</strong>和<strong>Tanstack Router</strong>。该项目提升了公司内部的开发人员和部分运营人员的工作效率和工作体验。',
    }),
    difficulty: t({
      en: 'Since the project included a feature for quickly generating WeChat Mini Program codes and links, it needed to display all Mini Program routes. However, exposing these routes posed a potential security risk if deployed publicly, as they contained sensitive information. To address this, I explored solutions on GitHub and ultimately found <strong>Staticrypt</strong>. By integrating it with <strong>vite-plugin-singlefile</strong>, I successfully implemented a client-side encryption mechanism, ensuring data security without relying on a backend.',
      'zh-cn':
        '由于项目提供了快速生成微信小程序码和链接的功能，所以需要展示小程序所有的路由，这在一定程度上属于隐私信息，部署在公网上会有一定安全风险。于是在Github上寻找解决方案，最终找到了<strong>staticrypt</strong>这个仓库，配合<strong>vite-plugin-singlefile</strong>实现了纯前端的加密功能。',
    }),
  },
  {
    name: 'Nothing',
    tag: t({
      en: 'Personal Project',
      'zh-cn': '个人项目',
    }),
    summary: t({
      en: 'This project is an interpreted programming language that supports strings, booleans, integers, arithmetic operations, functions, higher-order functions, variable binding, and closures.',
      'zh-cn':
        '该项目是一个支持字符串、布尔值、整型、算术运算、函数、高阶函数、变量绑定和闭包的解释型编程语言。',
    }),
    stack: [
      {
        value: ['Bun', 'TypeScript'],
      },
    ],
    highlight: t({
      en: 'Through this project, I fully implemented the development of a lexical analyzer, parser, and evaluator. The project was developed using Test-Driven Development (TDD) methodology, which helped ensure its stability and robustness. The tech stack and toolchain used in this project are quite innovative. I chose <strong>TypeScript</strong> as the development language and <strong>Bun</strong> as the runtime. Thanks to <strong>Bun</strong>, I was able to quickly package the project into an executable program for distribution.',
      'zh-cn':
        '通过这个项目，我完整实践了词法分析器、语法分析器和求值器的开发。项目使用了测试驱动开发（TDD）的开发方法进行开发，一定程度上保证了项目的稳定性和健壮性。项目使用的技术栈和工具链比较新颖，我选择了<strong>TypeScript</strong>作为开发语言，<strong>Bun</strong>作为运行时，得益于<strong>Bun</strong>，我可以将项目快速打包为一个可执行程序以供分发。',
    }),
    difficulty: t({
      en: 'The implementation of closures was a challenging aspect. The final solution was to bind an environment object to each function-type object. The environment object not only stores a map of function parameters but also holds a reference to the outer environment. When a function encounters a variable, it first looks for it in its own environment; if not found, it searches in the outer environment, continuing this process until it either finds the variable or reaches a null outermost environment. This mechanism is somewhat similar to the prototype chain in <strong>JavaScript</strong>.',
      'zh-cn':
        '闭包的实现一度令我困扰，最终的解决方案是给每一个类型为函数的对象绑定一个环境对象，环境对象中除了存放函数参数的map之外，还有一个外层环境成员，函数运行时遇到变量时优先从自身的环境中获取，获取不到再去外层环境获取，直至拿到变量的值或者最外层环境为null。打个不太恰当的比方，这种机制有些类似<strong>JavaScript</strong>中的原型链。',
    }),
  },
];
---

<Section
  id="project-experience"
  title={t({
    en: 'Project Experience',
    'zh-cn': '项目经验',
  })}
  subtitle="👨‍💻"
>
  <ul class="flex flex-col gap-4">
    {
      projectExperienceList.map(
        ({ name, tag, type, summary, role, stack, highlight, difficulty }) => (
          <li class="flex flex-col gap-2">
            <div class="grid w-full grid-cols-1 gap-2 sm:grid-cols-3">
              <strong>
                <h3>{name}</h3>
              </strong>
              <strong>{tag}</strong>
              {type && <span>{type}</span>}
            </div>
            <ul class="flex list-inside list-disc flex-col gap-1">
              <li
                set:html={`<strong>${t({
                  en: 'Summary:&nbsp;',
                  'zh-cn': '简介：',
                })}</strong>${summary}`}
              />
              {role && (
                <li
                  set:html={`<strong>${t({
                    en: 'Role:&nbsp;',
                    'zh-cn': '我的角色：',
                  })}</strong>${role}`}
                />
              )}
              <li
                set:html={`<strong>${t({
                  en: 'Main Stack:&nbsp;',
                  'zh-cn': '主要技术栈：',
                })}</strong><ul class="ps-4 list-[circle] list-inside">${stack.map((stack) => `<li>${stack.label ? `<strong>${stack.label}</strong>` : ''}${stack.value.join('&nbsp;/&nbsp;')}</li>`).join('')}</ul>`}
              />
              <li
                set:html={`<strong>${t({
                  en: 'Highlight:&nbsp;',
                  'zh-cn': '亮点：',
                })}</strong>${highlight}`}
              />
              <li
                set:html={`<strong>${t({
                  en: 'Difficulty:&nbsp;',
                  'zh-cn': '难点：',
                })}</strong>${difficulty}`}
              />
            </ul>
          </li>
        ),
      )
    }
  </ul>
</Section>
